graph TB
    %% SPECK-128/128 Block Cipher Flow Diagram
    %% Research Paper Quality - Pre-Quantum Algorithm c2
    
    classDef droneNode fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
    classDef gcsNode fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px,color:#000
    classDef cryptoOp fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000
    classDef dataFlow fill:#e8f5e8,stroke:#388e3c,stroke-width:2px,color:#000
    classDef portNode fill:#fff9c4,stroke:#f9a825,stroke-width:2px,color:#000

    subgraph DRONE_SIDE ["üöÅ DRONE SIDE - SPECK-128/128 Implementation"]
        FC[Flight Controller<br/>MAVLink Source]:::droneNode
        
        subgraph DRONE_CRYPTO ["drone_speck.py Process"]
            D_LISTEN[Listen Thread<br/>Port 5820<br/>Plaintext Telemetry]:::droneNode
            
            subgraph D_ENC_PROCESS ["SPECK Encryption Process"]
                D_IV[Generate Random IV<br/>16 bytes random<br/>CBC Mode Initialization]:::cryptoOp
                D_PAD[PKCS7 Padding<br/>Pad to block size<br/>128-bit blocks]:::cryptoOp
                D_SPECK_ENC[SPECK-128/128 Encrypt<br/>Key: 16-byte PSK<br/>Mode: CBC<br/>Block Size: 128 bits]:::cryptoOp
                D_FRAME_ENC[Frame Output<br/>IV || Ciphertext<br/>Total: 16 + encrypted_length]:::cryptoOp
            end
            
            D_SEND[Send Thread<br/>Port 5821<br/>Encrypted Telemetry]:::droneNode
            
            D_RECV[Receive Thread<br/>Port 5811<br/>Encrypted Commands]:::droneNode
            
            subgraph D_DEC_PROCESS ["SPECK Decryption Process"]
                D_SPLIT[Split Frame<br/>Extract: IV (16 bytes)<br/>Extract: Ciphertext (remainder)]:::cryptoOp
                D_SPECK_DEC[SPECK-128/128 Decrypt<br/>Key: 16-byte PSK<br/>Mode: CBC<br/>IV: Extracted IV]:::cryptoOp
                D_UNPAD[Remove PKCS7 Padding<br/>Validate padding<br/>Extract original message]:::cryptoOp
            end
            
            D_FORWARD[Forward Thread<br/>Port 5812<br/>Decrypted Commands]:::droneNode
        end
    end

    subgraph NETWORK ["üåê Network Layer"]
        P5820[Port 5820<br/>Drone Plaintext TLM]:::portNode
        P5821[Port 5821<br/>GCS Encrypted TLM]:::portNode
        P5810[Port 5810<br/>GCS Plaintext CMD]:::portNode
        P5811[Port 5811<br/>Drone Encrypted CMD]:::portNode
        P5812[Port 5812<br/>Drone Decrypted CMD]:::portNode
        P5822[Port 5822<br/>GCS Decrypted TLM]:::portNode
    end

    subgraph GCS_SIDE ["üñ•Ô∏è GCS SIDE - SPECK-128/128 Implementation"]
        GCS_APP[GCS Application<br/>MAVLink Destination]:::gcsNode
        
        subgraph GCS_CRYPTO ["gcs_speck.py Process"]
            G_LISTEN_TLM[Listen Thread<br/>Port 5821<br/>Encrypted Telemetry]:::gcsNode
            
            subgraph G_DEC_PROCESS ["SPECK Decryption Process"]
                G_SPLIT[Split Frame<br/>Extract: IV (16 bytes)<br/>Extract: Ciphertext (remainder)]:::cryptoOp
                G_SPECK_DEC[SPECK-128/128 Decrypt<br/>Key: 16-byte PSK<br/>Mode: CBC<br/>IV: Extracted IV]:::cryptoOp
                G_UNPAD[Remove PKCS7 Padding<br/>Validate padding<br/>Extract original message]:::cryptoOp
            end
            
            G_FORWARD_TLM[Forward Thread<br/>Port 5822<br/>Decrypted Telemetry]:::gcsNode
            
            G_LISTEN_CMD[Listen Thread<br/>Port 5810<br/>Plaintext Commands]:::gcsNode
            
            subgraph G_ENC_PROCESS ["SPECK Encryption Process"]
                G_IV[Generate Random IV<br/>16 bytes random<br/>CBC Mode Initialization]:::cryptoOp
                G_PAD[PKCS7 Padding<br/>Pad to block size<br/>128-bit blocks]:::cryptoOp
                G_SPECK_ENC[SPECK-128/128 Encrypt<br/>Key: 16-byte PSK<br/>Mode: CBC<br/>Block Size: 128 bits]:::cryptoOp
                G_FRAME_ENC[Frame Output<br/>IV || Ciphertext<br/>Total: 16 + encrypted_length]:::cryptoOp
            end
            
            G_SEND[Send Thread<br/>Port 5811<br/>Encrypted Commands]:::gcsNode
        end
    end

    %% Data Flow - Telemetry Path (Drone ‚Üí GCS)
    FC -->|MAVLink Telemetry| P5820
    P5820 --> D_LISTEN
    D_LISTEN --> D_IV
    D_IV --> D_PAD
    D_PAD --> D_SPECK_ENC
    D_SPECK_ENC --> D_FRAME_ENC
    D_FRAME_ENC --> D_SEND
    D_SEND -->|UDP Encrypted| P5821
    P5821 --> G_LISTEN_TLM
    G_LISTEN_TLM --> G_SPLIT
    G_SPLIT --> G_SPECK_DEC
    G_SPECK_DEC --> G_UNPAD
    G_UNPAD --> G_FORWARD_TLM
    G_FORWARD_TLM -->|MAVLink Telemetry| P5822
    P5822 --> GCS_APP

    %% Data Flow - Command Path (GCS ‚Üí Drone)
    GCS_APP -->|MAVLink Commands| P5810
    P5810 --> G_LISTEN_CMD
    G_LISTEN_CMD --> G_IV
    G_IV --> G_PAD
    G_PAD --> G_SPECK_ENC
    G_SPECK_ENC --> G_FRAME_ENC
    G_FRAME_ENC --> G_SEND
    G_SEND -->|UDP Encrypted| P5811
    P5811 --> D_RECV
    D_RECV --> D_SPLIT
    D_SPLIT --> D_SPECK_DEC
    D_SPECK_DEC --> D_UNPAD
    D_UNPAD --> D_FORWARD
    D_FORWARD -->|MAVLink Commands| P5812
    P5812 --> FC

    %% Algorithm Details
    subgraph ALGO_DETAILS ["üìã SPECK-128/128 Algorithm Details"]
        SPECS["üîê SPECK-128/128 Specifications<br/>‚Ä¢ Type: Lightweight Block Cipher<br/>‚Ä¢ Key Size: 128 bits (16 bytes)<br/>‚Ä¢ Block Size: 128 bits (16 bytes)<br/>‚Ä¢ Mode: CBC (Cipher Block Chaining)<br/>‚Ä¢ IV Size: 128 bits (16 bytes)<br/>‚Ä¢ Designer: NSA (2013)<br/>‚Ä¢ Variant: SPECK-128/128 (c2 in research paper)"]:::dataFlow
        
        IMPL["‚öôÔ∏è Implementation Details<br/>‚Ä¢ Library: drneha.new_git_repos.Speck.speck<br/>‚Ä¢ Class: Python_SPECK<br/>‚Ä¢ Pre-shared Key: 'MySecureSpeckKey' (research only)<br/>‚Ä¢ Padding: PKCS7 (pycryptodome)<br/>‚Ä¢ Frame Format: [16-byte IV][padded_ciphertext]<br/>‚Ä¢ Error Handling: Exception on decrypt failure"]:::dataFlow
        
        SECURITY["‚ö†Ô∏è Security Considerations<br/>‚Ä¢ CBC Mode: Requires MAC for authenticity<br/>‚Ä¢ IV Randomness: Critical for security<br/>‚Ä¢ Padding Oracle: Potential vulnerability<br/>‚Ä¢ Key Reuse: Same PSK across sessions<br/>‚Ä¢ Research Context: Acceptable for testing"]:::cryptoOp
    end
