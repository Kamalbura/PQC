graph TB
    %% Dilithium2 Post-Quantum Digital Signature Flow Diagram
    %% Research Paper Quality - Post-Quantum Algorithm c5
    
    classDef droneNode fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
    classDef gcsNode fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px,color:#000
    classDef pqcOp fill:#e8f5e8,stroke:#2e7d32,stroke-width:3px,color:#000
    classDef sigOp fill:#fff3e0,stroke:#f57c00,stroke-width:3px,color:#000
    classDef keyExchange fill:#ffebee,stroke:#c62828,stroke-width:3px,color:#000
    classDef portNode fill:#fff9c4,stroke:#f9a825,stroke-width:2px,color:#000

    subgraph INITIALIZATION ["üîê Key Exchange & Setup Phase (TCP Port 5800)"]
        subgraph DRONE_INIT ["Drone Initialization"]
            D_DILITHIUM[Dilithium2 Setup<br/>Generate Keypair<br/>Public Key: 1312 bytes<br/>Secret Key: 2528 bytes]:::pqcOp
            D_KYBER[Kyber-768 KEM<br/>Client Mode<br/>For Session Key]:::pqcOp
            D_KEY_DERIVE[Derive AES Key<br/>SHA-256(kyber_secret)<br/>Initialize AES-256-GCM]:::keyExchange
        end
        
        subgraph GCS_INIT ["GCS Initialization"]
            G_DILITHIUM[Dilithium2 Setup<br/>Generate Keypair<br/>Public Key: 1312 bytes<br/>Secret Key: 2528 bytes]:::pqcOp
            G_KYBER[Kyber-768 KEM<br/>Server Mode<br/>For Session Key]:::pqcOp
            G_KEY_DERIVE[Derive AES Key<br/>SHA-256(kyber_secret)<br/>Initialize AES-256-GCM]:::keyExchange
        end
        
        %% Key Exchange Flow
        D_KYBER -.->|TCP Handshake| G_KYBER
        D_DILITHIUM -.->|Exchange Public Keys| G_DILITHIUM
        D_KEY_DERIVE -.->|Same Session Key| G_KEY_DERIVE
    end

    subgraph DRONE_SIDE ["üöÅ DRONE SIDE - Dilithium2 Implementation"]
        FC[Flight Controller<br/>MAVLink Source]:::droneNode
        
        subgraph DRONE_CRYPTO ["drone_dilithium2.py Process"]
            D_LISTEN[Listen Thread<br/>Port 5820<br/>Plaintext Telemetry]:::droneNode
            
            subgraph D_SIGN_PROCESS ["Signing Process"]
                D_SIGN[Dilithium2 Sign<br/>Input: MAVLink message<br/>Output: 2420-byte signature]:::sigOp
                D_FRAME[Frame Signed Message<br/>DILITHIUM2_SIG + sig_len + signature +<br/>DILITHIUM2_MSG + plaintext]:::sigOp
                D_ENCRYPT[AES-256-GCM Encrypt<br/>Input: Signed frame<br/>Output: nonce || ciphertext]:::keyExchange
            end
            
            D_SEND[Send Thread<br/>Port 5821<br/>Signed + Encrypted]:::droneNode
            
            D_RECV[Receive Thread<br/>Port 5811<br/>Signed + Encrypted Commands]:::droneNode
            
            subgraph D_VERIFY_PROCESS ["Verification Process"]
                D_DECRYPT[AES-256-GCM Decrypt<br/>Extract: nonce, ciphertext<br/>Output: Signed frame]:::keyExchange
                D_PARSE[Parse Signed Frame<br/>Extract: signature, message<br/>Validate markers]:::sigOp
                D_VERIFY[Dilithium2 Verify<br/>Input: message, signature, GCS_pubkey<br/>Output: True/False]:::sigOp
            end
            
            D_FORWARD[Forward Thread<br/>Port 5812<br/>Verified Commands Only]:::droneNode
        end
    end

    subgraph NETWORK ["üåê Network Layer"]
        P5800[Port 5800<br/>TCP Key Exchange<br/>+ Public Key Exchange]:::portNode
        P5820[Port 5820<br/>Drone Plaintext TLM]:::portNode
        P5821[Port 5821<br/>GCS Signed+Encrypted TLM]:::portNode
        P5810[Port 5810<br/>GCS Plaintext CMD]:::portNode
        P5811[Port 5811<br/>Drone Signed+Encrypted CMD]:::portNode
        P5812[Port 5812<br/>Drone Verified CMD]:::portNode
        P5822[Port 5822<br/>GCS Verified TLM]:::portNode
    end

    subgraph GCS_SIDE ["üñ•Ô∏è GCS SIDE - Dilithium2 Implementation"]
        GCS_APP[GCS Application<br/>MAVLink Destination]:::gcsNode
        
        subgraph GCS_CRYPTO ["gcs_dilithium2.py Process"]
            G_LISTEN_CMD[Listen Thread<br/>Port 5810<br/>Plaintext Commands]:::gcsNode
            
            subgraph G_SIGN_PROCESS ["Signing Process"]
                G_SIGN[Dilithium2 Sign<br/>Input: MAVLink message<br/>Output: 2420-byte signature]:::sigOp
                G_FRAME[Frame Signed Message<br/>DILITHIUM2_SIG + sig_len + signature +<br/>DILITHIUM2_MSG + plaintext]:::sigOp
                G_ENCRYPT[AES-256-GCM Encrypt<br/>Input: Signed frame<br/>Output: nonce || ciphertext]:::keyExchange
            end
            
            G_SEND[Send Thread<br/>Port 5811<br/>Signed + Encrypted]:::gcsNode
            
            G_LISTEN_TLM[Listen Thread<br/>Port 5821<br/>Signed + Encrypted Telemetry]:::gcsNode
            
            subgraph G_VERIFY_PROCESS ["Verification Process"]
                G_DECRYPT[AES-256-GCM Decrypt<br/>Extract: nonce, ciphertext<br/>Output: Signed frame]:::keyExchange
                G_PARSE[Parse Signed Frame<br/>Extract: signature, message<br/>Validate markers]:::sigOp
                G_VERIFY[Dilithium2 Verify<br/>Input: message, signature, Drone_pubkey<br/>Output: True/False]:::sigOp
            end
            
            G_FORWARD_TLM[Forward Thread<br/>Port 5822<br/>Verified Telemetry Only]:::gcsNode
        end
    end

    %% Key Exchange Connections
    D_KEY_DERIVE --> P5800
    P5800 --> G_KEY_DERIVE

    %% Data Flow - Telemetry Path (Drone ‚Üí GCS)
    FC -->|MAVLink Telemetry| P5820
    P5820 --> D_LISTEN
    D_LISTEN --> D_SIGN
    D_SIGN --> D_FRAME
    D_FRAME --> D_ENCRYPT
    D_ENCRYPT --> D_SEND
    D_SEND -->|UDP Signed+Encrypted| P5821
    P5821 --> G_LISTEN_TLM
    G_LISTEN_TLM --> G_DECRYPT
    G_DECRYPT --> G_PARSE
    G_PARSE --> G_VERIFY
    G_VERIFY -->|If Valid| G_FORWARD_TLM
    G_FORWARD_TLM -->|Verified MAVLink| P5822
    P5822 --> GCS_APP

    %% Data Flow - Command Path (GCS ‚Üí Drone)
    GCS_APP -->|MAVLink Commands| P5810
    P5810 --> G_LISTEN_CMD
    G_LISTEN_CMD --> G_SIGN
    G_SIGN --> G_FRAME
    G_FRAME --> G_ENCRYPT
    G_ENCRYPT --> G_SEND
    G_SEND -->|UDP Signed+Encrypted| P5811
    P5811 --> D_RECV
    D_RECV --> D_DECRYPT
    D_DECRYPT --> D_PARSE
    D_PARSE --> D_VERIFY
    D_VERIFY -->|If Valid| D_FORWARD
    D_FORWARD -->|Verified MAVLink| P5812
    P5812 --> FC

    %% Rejection Paths
    G_VERIFY -->|If Invalid| G_REJECT[Reject Message<br/>Log Security Event]:::sigOp
    D_VERIFY -->|If Invalid| D_REJECT[Reject Message<br/>Log Security Event]:::sigOp

    %% Algorithm Details
    subgraph ALGO_DETAILS ["üìã Dilithium2 Algorithm Details"]
        SPECS["üîê ML-DSA-44 Specifications<br/>‚Ä¢ Type: Post-Quantum Digital Signature<br/>‚Ä¢ Security Level: NIST Level 2 (128-bit equivalent)<br/>‚Ä¢ Public Key Size: 1312 bytes<br/>‚Ä¢ Signature Size: 2420 bytes<br/>‚Ä¢ Private Key Size: 2528 bytes<br/>‚Ä¢ Standard: NIST FIPS 204 (ML-DSA)<br/>‚Ä¢ Variant: Dilithium2 (c5 in research paper)"]:::pqcOp
        
        IMPL["‚öôÔ∏è Implementation Details<br/>‚Ä¢ Library: oqs.oqs (liboqs-python)<br/>‚Ä¢ Session Key: Kyber-768 KEM + AES-256-GCM<br/>‚Ä¢ Frame Format: [MARKER][sig_len][signature][MARKER][message]<br/>‚Ä¢ Markers: DILITHIUM2_SIG, DILITHIUM2_MSG<br/>‚Ä¢ Error Handling: Invalid signatures rejected<br/>‚Ä¢ Thread Safety: Separate signing/verification contexts"]:::sigOp
        
        SECURITY["üõ°Ô∏è Security Properties<br/>‚Ä¢ Post-Quantum Security: Lattice-based signatures<br/>‚Ä¢ Non-repudiation: Cryptographic proof of origin<br/>‚Ä¢ Message Integrity: Tamper detection<br/>‚Ä¢ Authentication: Verify sender identity<br/>‚Ä¢ Forward Security: Compromise doesn't affect past signatures"]:::keyExchange
    end
